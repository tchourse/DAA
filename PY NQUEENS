# Function to check if placing a queen at position (x, y) is safe
def is_safe(arr, x, y, n):
    # Check the column
    for row in range(x):
        if arr[row][y] == 1:
            return False  # Another queen is placed in the same column

    # Check upper left diagonal
    row, col = x, y
    while row >= 0 and col >= 0:
        if arr[row][col] == 1:
            return False  # Another queen is placed in the upper left diagonal
        row -= 1
        col -= 1

    # Check upper right diagonal
    row, col = x, y
    while row >= 0 and col < n:
        if arr[row][col] == 1:
            return False  # Another queen is placed in the upper right diagonal
        row -= 1
        col += 1

    return True  # Safe to place the queen


# Function to print the board configuration
def print_board(arr, n):
    for i in range(n):
        for j in range(n):
            if arr[i][j] == 1:
                print("[Q]", end=" ")  # Queen placed
            else:
                print("[ ]", end=" ")  # Empty space
        print()
    print()


# Backtracking function to place queens
def n_queen(arr, x, n):
    # If all queens are placed, print the solution
    if x == n:
        print_board(arr, n)
        return True

    # Try placing a queen in each column of the current row
    for col in range(n):
        if is_safe(arr, x, col, n):
            arr[x][col] = 1  # Place queen at (x, col)

            # Recur to place the next queen
            if n_queen(arr, x + 1, n):
                return True

            # Backtrack: remove the queen and try the next column
            arr[x][col] = 0

    return False  # If no safe position found in this row


def main():
    n = 8  # Fixed size of the board for 8 Queens problem

    arr = [[0] * n for _ in range(n)]  # Create a 2D array to represent the board

    first_queen_column = int(input("Enter the column (0-indexed) to place the first queen in the first row: "))

    # Validate the first queen's position
    if 0 <= first_queen_column < n:
        arr[0][first_queen_column] = 1

        # Check if the initial placement leads to any solution
        if not n_queen(arr, 1, n):
            print(f"No solution found after placing the first queen at (0, {first_queen_column}).")
    else:
        print(f"Invalid column for the first queen. Please try again with a valid column (0 to {n-1}).")


if __name__ == "__main__":
    main()

'''
Example Output:

Enter the column (0-indexed) to place the first queen in the first row: 4
[ ] [ ] [ ] [ ] [Q] [ ] [ ] [ ]
[ ] [ ] [ ] [Q] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [Q] [ ]
[ ] [Q] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [Q] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [Q] [ ] [ ]
[Q] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
'''

'''
Time Complexity: O(N!)
    - There are N rows, and for each row, there are N possible columns to place a queen. 
    - The recursive calls explore all possible combinations of queen placements.
Auxiliary Space: O(N^2)
    - The space required to store the N x N board.
'''

